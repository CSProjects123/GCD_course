						NOTES:

LESSON 1
Creating a constant and binding it to a closure is exactly what the complier does when it sees a func statement. 


typealias -- you can use this to make shortcuts while programming. The format is "typealias newname=oldname"

functions and closures can return both functions and closures 

functions and closures are the same thing.

variable capture: suppose you have a varible declred within a fucntion and then you have another function define in the first function, after the varible is declared. Suppose the second function uses the variable. And the first function returns the second function. now, each return of the first function will have new copies of the variable for the second function which is being returned. i.e. they each capture a new copy of the varible.

variable capture makes swift a fucntional programming language. 

LESSON 2 

grand central dispatch makes asynchronous programming easier and safer by hiding threads from the developer

 GCD provides us with two types of queues - synchronous (serial) and asynchronous (concurrent)

 There is a special queue called the main queue - this queue handles the UI of your app

You can still have concurrent programming with Synchronous queues. We do have sperate threads running here. The differece between synchronous queues and asynchronous queues is tha the order in which the threads are being executed in the synchronous queue is predictable. 


There are three aspects to the basic functionality of GCD: 
1. create a queue - either from scratch or by reusing an existing queue ;
2. get the Main queue 
3. add a closure to a queue. 


GCD was written in C, not in Swift, so GCD is made of functions and types, not classes and objects. 

Following are the main functions in GCD:

dispatch_q_t  - Represents a queue
dispatch_q_create(): creates a queue from scratch. This takes two paramteres - name and type of the queue (serial or concurrent)

You can sepcify serial by passing in "DISPATCH_UEUE_SERIAL" or "nil"


iOS gives each app 4 extea queues on top of the main one - these are global queues: 

QOS_CLASS_USER_INTERACTIVE; top priority 
QOS_CLASS_USER_INITIATED; regular priority 
QOS_CLASS_BACKGROUND; low 
QOS_CLASS_UTILITY; lowest

We can access these queues by the function "dispatch_get_global_queue()" 

To get the main queue , you can use the "dispatch_get_main_queue" for this 

To add closure to the queue , use the dispatch_async() function; it returns immediately after adding closure 


When a framework can run in the background, it is said to be thread-safe. 
Some frameworks, however, can only run in the apple main queue, UI kit and core data are part of this. YOu cant run anything from the UIKit in the background, or the app will crash intermittently. For core data, NSManagedObject can only be used in the same queue in which it was created . If it was created in the backgound, only use it in the background. It it was created in the Main queue, only use it in the main queue. 




								NOTES FROM LESSON 3



A refresher on swift syntax:
say we have something like let url = NSURL(string: BigImahes.seaLion.raValue)
in this case, the URL may be a nil. i.e. a let value can take a nil. Here. url is an optional
When this is used as a parameter, it can happen that the function does not take in optinals. So you will have to unwrap it with an exclamation point. 
let imageData = NSData(contentsOfURl: url!)
It is not good practice to have all these exclamatin points in swift code. You should try to put everything in the "if-let" clauses. 
Note++ - you dont need to nest your if-let clauses. One if-let can have many "lets" separated by commas


If the name ends in view - it belongs in the main queue.

Not all of UIKit is htread unsafe. there are a few exception like UIIMage. But ALL the views are unsafe. 


The first function that we covered was:

    @IBAction func synchronousDownload(sender: UIBarButtonItem) {
        if let url = NSURL(string: BigImages.seaLion.rawValue){
            if let imageData = NSData(contentsOfURL: url){
                if let image = UIImage(data: imageData){
                photoView.image=image
                
                }
            }
        }
        
    }


// Here, we are just downloading the image in a method. What this does is that it blocks the UI, so durign the time it takes to downlaod the image, the UI is blocked - this gives us a very sub-power user experience.










The second case we considered:


    @IBAction func simpleAsynchronousDownload(sender: UIBarButtonItem) {
        
        let url = NSURL(string: BigImages.shark.rawValue)
        let download = dispatch_queue_create("download", nil)
        dispatch_async(download) { () -> Void in
            let data = NSData(contentsOfURL: url!)
            let image = UIImage(data: data!)
            dispatch_async(dispatch_get_main_queue(), { () -> Void in
                self.photoView.image = image!
            })
        }

    }

I this case, we are creating a queue (of type synchronous) and then adding a closure to teh queue. Note that it returns immediately after addin the closure. 
So now all the downloading is going on in a separate queue, and the UI is unimpeded. It is essentially running in the background. In the background however, right after we finish downloading the iamge, we jump to the Main queue so that we can we can update the UI. 
A note on the Syntax: i'm still unclear on how this is working exactly. in the first closure, we have everything within the curly braces. In the seco0nd (nested) closure, we we have everythig with normal braces. 
So, in the first Case, the dispatch_async will take 2 parameters. the queue, adn the closure. In this case, we are usign the Trailing Closure Syntax. 
I think its of the following type ( from goshdarnclosuresyntax.com) :

As an argument to a function call:
func({(ParameterTypes) -> (ReturnType) in statements})

In the second case, we provide a closure that will be running in the main queue. 

It seems like the first dispacth_async is taking in one parameter,while the second dispatch_async is taking in two parameters ( the queue as well as the closure)












    the last function we implemented was :


    @IBAction func asynchronousDownload(sender: UIBarButtonItem) {
    }
    
    func withBigIMage(completionHandler handler:(image:UIImage) -> Void){
        
        dispatch_async(dispatch_get_global_queue(QOS_CLASS_USER_INITIATED, 0)) {() -> Void in
            
            if let url = NSURL(string: BigImages.whale.rawValue),
            let imgData = NSData(contentsOfURL: url),
                let img = UIImage(data:imgData) {
                    
                    dispatch_async(dispatch_get_main_queue(), { () -> Void in
                    handler(image:img)
                    })
            }
    }
    }

The "0" in the dispatch_get_global_queue is a flag value, it has been set up for the future and is not being used righ tnow so you do not need to pay any attention to it. 


The first closure here follows teh same pattern as the first close in the second function 


Its good practice to have all your completion handlers run in the Main Queue, they typically have to do with view 

teh issue here is that the function does not actually update the UI with the image. so its hard to draw this out logically. --> As i suspected, the image is added outside the handlers. 




    @IBAction func asynchronousDownload(sender: UIBarButtonItem) {
        
        // hide current image
        photoView.image = nil
        
        // start animation
        activityView.startAnimating()
        
        withBigImage { (image) -> Void in
            // Display it
            self.photoView.image = image
            
            // Stop animating
            self.activityView.stopAnimating()
        }
    }
    
    // Changes the alpha value (transparency of the image). It's only purpose is to show if the
    // UI is blocked or not.
    @IBAction func setTransparencyOfImage(sender: UISlider) {
        photoView.alpha = CGFloat(sender.value)
    }
    
    // MARK: Download Big Image
    
    // This method downloads and image in the background once it's
    // finished, it runs the closure it receives as a parameter.
    // This closure is called a completion handler
    // Go download the image, and once you're done, do _this_ (the completion handler)
    func withBigImage(completionHandler handler: (image: UIImage) -> Void){
        
        dispatch_async(dispatch_get_global_queue(QOS_CLASS_USER_INITIATED, 0)) { () -> Void in
            
            // get the url
            // get the NSData
            // turn it into a UIImage
            if let url = NSURL(string: BigImages.whale.rawValue), let imgData = NSData(contentsOfURL: url), let img = UIImage(data: imgData) {
                // run the completion block
                // always in the main queue, just in case!
                dispatch_async(dispatch_get_main_queue(), { () -> Void in
                    handler(image: img)
                })
            }
        }
    }





    







































									QUESTIONS:

1. In the closure demonstration ( first exercise), why are there only 4 results to the array of closures. The code is executing 5 times so there should be 5 answers correct? 

